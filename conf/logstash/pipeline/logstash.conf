input {
    udp {
        port => 6614
        type => "wedge"
    }
    tcp {
        port => 6614
        type => "wedge"
    }
    tcp {
        port => 5514
        type => "syslog"
    }
    udp {
        port => 5514
        type => "syslog"
    }
    udp {
        port => 514
        type => "syslog"
    }    
    tcp {
        port => 6343
        type => "sflow"
        codec => sflow {}
    }
    beats {
        port => 5044
        type => "filebeat"
    }
    udp {
        port => 6343
        type => "sflow"
        codec => sflow { }
    }
    udp {
        port => 25826
        buffer_size => 1452
        codec => collectd { typesdb => [ '/usr/share/logstash/types.db'] }
    }
}

## Add your filters / logstash plugins configuration here
## grok debug http://grokdebug.herokuapp.com/
filter {
    if [type] == "wedge" {
        grok {
            # to identify the config entry in logstash pipeline statistics
            id => "grok_wedge"

            match => {
                "message" => [
                    '^\<(?<log_pri>\d+)\>%{SYSLOGTIMESTAMP:log_ts} %{WORD:log_host} %{WORD:log_os}\[-\]: %{UUID:log_uuid} (?<log_msgpri>(?:""|P\d+)) %{WORD:log_act} (?<log_reason>.*?) (?<log_sip>(?:[0-9]{1,3}\.){3}[0-9]{1,3}) (?<log_sport>(?:""|%{NUMBER})) (?<log_dip>(?:[0-9]{1,3}\.){3}[0-9]{1,3}) (?<log_dport>(?:""|%{NUMBER})) %{WORD:log_proto} (?<log_detail>.*?) (?<log_srule>(\d+:\d+:\d+)|"") "(?<log_hash>.*?)" "(?<log_sinfo>.*?)" "(?<log_dinfo>.*?)" "(?<log_subj>.*?)"$'
                ]
            }
        }
    }

    if [type] == "syslog" {
        grok {
            match => {
                "message" => [
                    "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}: :- %{DATA:syslog_function}: %{GREEDYDATA:syslog_message}",
                    "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_level} %{DATA:syslog_program}: %{DATA:syslog_function}: %{GREEDYDATA:syslog_message}",
                    "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_level} %{DATA:syslog_program} %{DATA} %{DATA}: %{GREEDYDATA:syslog_message}",
                    "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_level} %{DATA:syslog_program}: %{GREEDYDATA:syslog_message}",
                    "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}\[%{NUMBER}\]: %{GREEDYDATA:syslog_message}"
                ]
            }
        }

        if "_grokparsefailure" not in [tags] {
            if [syslog_function] == "setHostIntfsOperStatus" {
                grok {
                    match => {
                        "syslog_message" => "Set operation status %{WORD:[@metadata][switch_port_status]} to host interface %{WORD:[@metadata][switch_port]}"
                    }
                }

                if [@metadata][switch_port_status] == "DOWN" or [@metadata][switch_port_status] == "UP" {
                    mutate {
                        add_field => { "switch_port_status" => "%{[@metadata][switch_port_status]}"
                                       "switch_port" =>  "%{[@metadata][switch_port]}"
                        }
                    }
                }
            }
        }
    }

    if [type] == "filebeat" {
        if "karaf.log" in [source] {
            grok {
                match => {
                    "message" => [
                        "%{TIMESTAMP_ISO8601:log_ts}%{SPACE}\|%{SPACE}%{LOGLEVEL:log_level}%{SPACE}\|%{SPACE}%{DATA:thread_name}%{SPACE}\|%{SPACE}%{WORD:handler_name}%{SPACE}\|%{SPACE}%{DATA:bundle_name}%{SPACE}\|%{SPACE}%{GREEDYDATA:msg_contents}",

                        "%{JAVACLASS:exception}[^\n]*(?m)%{GREEDYDATA:stacktrace}"
                    ]
                }
            }

            if "_grokparsefailure" not in [tags] and ![exception] {
                mutate {
                    add_field => {
                        "clientip" => ""
                        "httpversion" => ""
                    }

                    # remove_field => ["message"]
                }
            }
        } else if "access.log" in [source] {
            grok {
                match => {
                    "message" => [
                        '%{IPORHOST:clientip} - (?:%{USERNAME:account}|-) \[%{HTTPDATE:log_ts}\] "(?:%{WORD:verb} %{DATA:request} HTTP/%{NUMBER:httpversion}|%{DATA:malformed_req})" %{NUMBER:response} %{NUMBER:bytes_sent} "%{DATA:http_referer}" "%{DATA:http_user_agent}"'
                    ]
                }
            }

            geoip {
                source => "clientip"
                fields => ["location", "city_name"]
            }

            if "_grokparsefailure" not in [tags] {
                mutate {
                    add_field => {
                        "log_level" => ""
                        "thread_name" => ""
                        "handler_name" => ""
                        "bundle_name" => ""
                    }
                }
            }
        } else if "error.log" in [source] {
            grok {
                match => {
                    "message" => [
                        '(?<log_ts>%{YEAR}[./]%{MONTHNUM}[./]%{MONTHDAY} %{TIME}) \[%{LOGLEVEL:log_level}\] %{POSINT:pid}#%{NUMBER:threadid}\: \*%{NUMBER:connectionid} %{GREEDYDATA:errormsg}, client: %{IP:clientip}, server: %{GREEDYDATA:server}, request: %{GREEDYDATA:request}'
                    ]
                }
            }
            geoip {
                source => "clientip"
                fields => ["location", "city_name"]
            }
        }
    }
}

output {

    if [type] == "filebeat" {
        if "_grokparsefailure" not in [tags] {
            websocket {
                id => "filebeat_websocket"
                host => "0.0.0.0"
                port => 3233
            }
        }

        elasticsearch {
            index => "control_log"
            hosts => "${ES_HOSTS}"
            manage_template => true
            template => "/usr/share/logstash/default-template.json"
            template_name => "default-template"
            template_overwrite => true
        }
    } else if [type] == "syslog" {
        elasticsearch {
            index => "switch_syslog"
            hosts => "${ES_HOSTS}"
        }

        if "_grokparsefailure" not in [tags] {
            if [syslog_function] == "setHostIntfsOperStatus" {
                if [@metadata][switch_port_status] == "DOWN" or [@metadata][switch_port_status] == "UP" {
                    websocket {
                        id => "logstash_websocket"
                        codec => "json"
                        host => "0.0.0.0"
                        port => 3232
                    }
                }
            }
        }
    } else if [type] == "sflow" {
        elasticsearch {
            index => "sflow"
            hosts => "${ES_HOSTS}"
        }
    } else if [type] == "wedge" {
        if "_grokparsefailure" not in [tags] and [log_reason] in ["MAAV", "VIRUS", "AIAV"] {
            websocket {
                id => "wedge_websocket"
                codec => "json"
                host => "0.0.0.0"
                port => 3234
            }
        }

        elasticsearch {
            index => "wedge"
            hosts => "${ES_HOSTS}"
        }
    } else {
        elasticsearch {
            index => "collectd"
            hosts => "${ES_HOSTS}"
        }
    }

    stdout { codec => rubydebug }
}

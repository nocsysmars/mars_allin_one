input {
    udp{
        port => 6614
        type => "wedge"
    }
    tcp {
       port => 6614
       type => "wedge"
    }
    tcp {
        port => 5514
        type => "syslog"
    }

    udp {
        port => 5514
        type => "syslog"
    }

    tcp {
        port => 6343
        type => "sflow"
        codec => sflow {}
    }
    beats {
        port => 5044
        type => "filebeat"
    }
    udp {
        port => 6343
        type => "sflow"
        codec => sflow { }
    }

    udp {
        port => 25826
        buffer_size => 1452
        codec => collectd { typesdb => [ '/usr/share/logstash/types.db'] }
    }
}

## Add your filters / logstash plugins configuration here
## grok debug http://grokdebug.herokuapp.com/
filter {
    if [type] == "wedge" {
        mutate { gsub => ["message","\"","'"] }

	mutate { gsub => ["message", "\n", ""] }

        grok {
            match => {
                "message" => [
                     "\<(?<log_pri>\d+)\>%{SYSLOGTIMESTAMP:log_ts} %{WORD:log_host} %{WORD:log_os}\[-\]: %{UUID:log_uuid} '(?<log_msgpri>[^']*)' %{WORD:log_act} %{WORD:log_reason} %{IP:log_sip} '(?<log_sport>[^']*)' %{IP:log_dip} '(?<log_dport>[^']*)' %{WORD:log_proto} '(?<log_detail>[^']*)' '(?<log_srule>[^']*)' '(?<log_hash>[^']*)' '(?<log_sinfo>[^']*)' '(?<log_dinfo>[^']*)' '(?<log_subj>[^']*)'"
                ]
            }
        }
    }

    if [type] == "syslog" {
        grok {
            match => {
                "message" => [
                    "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}: :- %{DATA:syslog_function}: %{GREEDYDATA:syslog_message}",
                    "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}\[%{NUMBER}\]: %{GREEDYDATA:syslog_message}"
                ]
            }
        }

        if [syslog_function] == "setHostIntfsOperStatus" {
            grok {
                match => {
                    "syslog_message" => "Set operation status %{WORD:[@metadata][switch_port_status]} to host interface %{WORD:[@metadata][switch_port]}"
                }
            }

            if [@metadata][switch_port_status] == "DOWN" or [@metadata][switch_port_status] == "UP" {
                mutate {
                    add_field => { "switch_port_status" => "%{[@metadata][switch_port_status]}"
                                   "switch_port" =>  "%{[@metadata][switch_port]}"
                                 }
                }
            }
        }
    }

    if [type] == "filebeat" {
        if "karaf.log" in [source] {
            grok {
                match => {
                    "message" => [
                       "%{TIMESTAMP_ISO8601}%{SPACE}\|%{SPACE}%{LOGLEVEL:log_type}%{SPACE}\|%{SPACE}%{DATA:thread}%{SPACE}\|%{SPACE}%{WORD:handler}%{SPACE}\|%{SPACE}%{DATA:bundle}%{SPACE}\|%{SPACE}%{GREEDYDATA}"
                    ]
                }
            }
            mutate {
               add_field => {
                  "log_level" => "%{log_type}"
                  "thread_name" => "%{thread}"
                  "handler_name" => "%{handler}"
                  "bundle_name" => "%{bundle}"
                  "msg_contents" => "%{content}"

                  "clientIP" => ""
                  "httpversion" => ""
               }

               # remove_field => ["message"]
            }
        } else if "access.log" in [source] {
           grok {
               match => {
                   "message" => [
                        "%{IPORHOST:clientip} - - \[%{HTTPDATE:timestamp}\] \"%{WORD:verb} %{URIPATHPARAM:request} HTTP/%{NUMBER:httpversion}\" %{NUMBER:response} %{GREEDYDATA}",
                        "%{IPORHOST:clientip} - %{WORD:account} \[%{HTTPDATE:timestamp}\] \"%{WORD:verb} %{URIPATHPARAM:request} HTTP/%{NUMBER:httpversion}\" %{NUMBER:response} %{GREEDYDATA}"
                   ]
               }
           }
           mutate {
               add_field => {
                  "log_level" => ""
                  "thread_name" => ""
                  "handler_name" => ""
                  "bundle_name" => ""
                  "msg_contents" => ""

                  "clientIP" => "%{clientip}"
                  "httpVersion" => "%{httpversion}"
               }
           }
        }
    }

    date {
        match => [ "timestamp" , "YYYY/MMM/dd:HH:mm:ss" ]
    }
}

output {
    if [type] == "filebeat" {
       websocket {
           id => "filebeat_websocket"
           host => "0.0.0.0"
           port => 3233
       }
       elasticsearch {
          index => "control_log"
          hosts => "127.0.0.1:9200"
       }
    } else if [type] == "syslog" {
       elasticsearch {
          index => "switch_syslog"
          hosts => "127.0.0.1:9200"
       }
    } else if [type] == "sflow" {
        elasticsearch {
          index => "sflow"
          hosts => "127.0.0.1:9200"
      }
    }
    else if [type] == "wedge" {
       websocket {
           id => "wedge_websocket"
           codec => "json"
           host => "0.0.0.0"
           port => 3234
       }
       elasticsearch {
           index => "wedge"
           hosts => "127.0.0.1:9200"
       }
    }
    else {
        elasticsearch {
            index => "collectd"
            hosts => "127.0.0.1:9200"
       }
    }

    if [syslog_function] == "setHostIntfsOperStatus" {
        if [@metadata][switch_port_status] == "DOWN" or [@metadata][switch_port_status] == "UP" {
            websocket {
                id => "logstash_websocket"
                codec => "json"
                host => "0.0.0.0"
                port => 3232
            }
        }
    }
    stdout { codec => rubydebug }

}
